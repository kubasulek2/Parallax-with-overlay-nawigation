a,
abbr,
acronym,
address,
applet,
article,
aside,
audio,
b,
big,
blockquote,
body,
canvas,
caption,
center,
cite,
code,
dd,
del,
details,
dfn,
div,
dl,
dt,
em,
embed,
fieldset,
figcaption,
figure,
footer,
form,
h1,
h2,
h3,
h4,
h5,
h6,
header,
hgroup,
html,
i,
iframe,
img,
ins,
kbd,
label,
legend,
li,
mark,
menu,
nav,
object,
ol,
output,
p,
pre,
q,
ruby,
s,
samp,
section,
small,
span,
strike,
strong,
sub,
summary,
sup,
table,
tbody,
td,
tfoot,
th,
thead,
time,
tr,
tt,
u,
ul,
var,
video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section {
  display: block;
}

body {
  line-height: 1;
}

ol,
ul {
  list-style: none;
}

blockquote,
q {
  quotes: none;
}

blockquote:after,
blockquote:before,
q:after,
q:before {
  content: '';
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

@font-face {
  font-family: Lato;
  src: url(../fonts/Lato-Bold.eot);
  src: url(../fonts/Lato-Bold.eot) format("embedded-opentype"),url(../fonts/Lato-Bold.woff2) format("woff2"),url(../fonts/Lato-Bold.woff) format("woff"),url(../fonts/Lato-Bold.ttf) format("truetype"),url(../fonts/Lato-Bold.svg) format("svg");
  font-weight: 700;
  font-style: normal;
}

@font-face {
  font-family: Lato;
  src: url(../fonts/Lato-Regular.eot);
  src: url(../fonts/Lato-Regular.eot) format("embedded-opentype"),url(../fonts/Lato-Regular.woff2) format("woff2"),url(../fonts/Lato-Regular.woff) format("woff"),url(../fonts/Lato-Regular.ttf) format("truetype"),url(../fonts/Lato-Regular.svg) format("svg");
  font-weight: 400;
  font-style: normal;
}

* {
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

html {
  height: 100%;
}

html body {
  height: 100%;
  font-family: Lato;
  font-size: 60%;
  text-align: justify;
  color: #262527;
}

@media only screen and (min-width:1024px) {
  html body {
    font-size: 70%;
  }
}

@media only screen and (min-width:1200px) {
  html body {
    font-size: 80%;
  }
}

@media only screen and (min-width:1400px) {
  html body {
    font-size: 90%;
  }
}

@media only screen and (min-width:1600px) {
  html body {
    font-size: 100%;
  }
}

.menu {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  width: 100%;
  overflow: hidden;
  background: #373634;
  position: fixed;
  z-index: 55;
}

.parallax #hamburger .fa-bars {
  font-size: 4em;
  color: #373634;
  position: fixed;
  top: 1rem;
  right: 3rem;
  -webkit-transition: all .2s ease;
  transition: all .2s ease;
  cursor: pointer;
  z-index: 2;
}

.parallax #hamburger .fa-bars:hover {
  font-size: 4.5em;
  top: .75rem;
  right: 2.75rem;
  color: #444340;
  text-shadow: .2rem .3rem .8rem rgba(0,0,0,.6);
}

.parallax #header {
  height: 60vh;
  background: url(../images/mountauns.jpeg) no-repeat left bottom fixed;
  background-size: auto;
  position: relative;
}

.parallax #header::after {
  content: '';
  position: absolute;
  opacity: .2;
  height: 100%;
  width: 100%;
  background: #fff;
}

.parallax #header #title {
  color: #373634;
  font-size: 4em;
  z-index: 2;
  position: fixed;
  text-align: left;
  top: 30vh;
  left: 50%;
  -webkit-transform: translate(-50%,-50%);
  transform: translate(-50%,-50%);
  -webkit-transition: top .5s ease,left .5s ease,text-align .5s ease,-webkit-transform .5s ease;
  transition: top .5s ease,left .5s ease,text-align .5s ease,-webkit-transform .5s ease;
  transition: top .5s ease,left .5s ease,transform .5s ease,text-align .5s ease;
  transition: top .5s ease,left .5s ease,transform .5s ease,text-align .5s ease,-webkit-transform .5s ease;
}

.parallax #header #title.pinned {
  text-align: left;
  position: fixed;
  top: 1rem;
  left: 2rem;
  -webkit-transform: initial;
  transform: initial;
}

.parallax #content {
  height: 100em;
}


/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
